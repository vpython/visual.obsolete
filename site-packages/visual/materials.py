import cvisual
from visual.primitives import texture
from numpy import array, reshape, fromstring, ubyte
import os.path

class material(cvisual.material):
   def __init__(self, **kwargs):
      cvisual.material.__init__(self)
      for key, value in kwargs.iteritems():
         self.__setattr__(key, value)
   
texturePath = os.path.split( __file__ )[0]

def findTexture(name):
    return os.path.join( texturePath, name )
def loadBTX(name, shape, **kw):
    a = reshape( fromstring( open(findTexture(name),"rb").read(), ubyte ), shape )
    return texture( data=a, **kw )
def loadImage(name, **kw):
    ## Requires PIL to be installed
    import Image
    im = Image.open(findTexture(name))
    a = array(im.getdata(), ubyte)
    return texture( data=reshape(a, im.size+(len(im.getbands()),)), **kw )

tx_turb3 = loadBTX( "turbulence3.btx", (64,64,64,3), antialias=True, mipmap=False )
tx_wood = loadBTX( "wood.btx", (512,512,3), antialias=True )
txs_env = [ loadBTX( "envl.btx", (256,256,3), antialias=True ),
            loadBTX( "envr.btx", (256,256,3), antialias=True ) ]

library = """
[vertex]
    varying vec3 N;
    varying vec3 v;
    varying vec3 p;
    uniform mat4 model_material;
    varying vec3 mat_pos;

    void basic(void)
    {
        p = gl_Vertex;
        v = vec3(gl_ModelViewMatrix * gl_Vertex);
        N = normalize(gl_NormalMatrix * gl_Normal);
        gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
        gl_FrontColor = gl_Color;
        gl_BackColor = gl_Color;
        mat_pos = model_material * gl_Vertex;
    }

[fragment]
    varying vec3 N;
    varying vec3 v;
    varying vec3 p;
    varying vec3 mat_pos;

    vec3 lightAt( vec3 N, vec3 E, vec3 diffuse, vec3 specular, float shininess ) {
        vec3 color = gl_LightModel.ambient.rgb * diffuse;
        int i;

        for(i=0; i<2; i++) {
            vec3 L = normalize( gl_LightSource[i].position.xyz ); 
            vec3 R = normalize(-reflect(L,N));

            // Diffuse Term
            color += (gl_LightSource[i].diffuse.rgb * max(dot(N,L), 0.0))*diffuse;

            // Specular Term
            if (shininess)
                color += specular * pow(max(dot(R,E),0.0),shininess);
        }
        return color;
    }
    
    vec3 light() {
        return lightAt( N, normalize(-v), gl_FrontMaterial.diffuse.rgb, vec3(.8,.8,.8), 64.0 );
    }
"""

def shader(x):
    if x.find("[vertex]") < 0:
        x = x + """
            [vertex]
            void main() {
                basic();
            }"""
    return library + "\n".join( l.strip() for l in x.split("\n") )

materials = [
    material( name = "fast", shader = """
[vertex]
        void main() {
            gl_Position = ftransform();
            gl_FrontColor = gl_Color;
        }
[fragment]
        void main() {
            gl_FragColor = gl_Color;
        }"""),
    material( name = "plastic", shader = shader( """
        [fragment]
        void main() {
            gl_FragColor.rgb = light();
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "rawturbulence", textures = [ tx_turb3 ], shader = shader( """
        [fragment]
        uniform sampler3D tex;

        void main() {
            vec3 tp = mat_pos;
            vec3 T = texture3D(tex, tp);
            T += texture3D(tex, tp * 8)/8;
            gl_FragColor.rgb = T;
            gl_FragColor.a = 1;
        }
        """ )),
    material( name = "rawturbulence_low", textures = [ tx_turb3 ], shader = shader( """
        [fragment]
        uniform sampler3D tex;

        void main() {
            vec3 tp = mat_pos;
            vec3 T = texture3D(tex, tp);
            //T += texture3D(tex, tp * 8)/8;
            gl_FragColor.rgb = T;
            gl_FragColor.a = 1;
        }
        """ )),
    material( name = "wood1", textures = [tx_wood], shader = shader( """
        [fragment]
        uniform sampler2D wood;

        void main() {
            vec3 C = texture2D( wood, mat_pos.xz );
            
            gl_FragColor.rgb = lightAt( normalize(N), normalize(-v),
                                        C*gl_FrontMaterial.diffuse.rgb,
                                        vec3(.5,.5,.5),
                                        5 );
            gl_FragColor.a = gl_Color.a;
        }
        """ ) ),
    material( name = "show_mat_pos", textures = [], shader = shader( """
        [fragment]
        void main() {
            gl_FragColor.rgb = mat_pos * .5;
            gl_FragColor.a = gl_Color.a;
            if ( mat_pos.x < 0 || mat_pos.x > 1 ) gl_FragColor.r = 1;
            if ( mat_pos.y < 0 || mat_pos.y > 1 ) gl_FragColor.g = 1;
            if ( mat_pos.z < 0 || mat_pos.z > 1 ) gl_FragColor.b = 1;
        }
        """ ) ),
    material( name = "wood2", textures = [tx_wood, tx_turb3], shader = shader( """
        [fragment]
        uniform sampler2D tex0;  // wood cross-section
        uniform sampler3D tex1;  // 3D turbulence

        void main() {
            vec3 tp = mat_pos.xyz * .5;
            vec3 T = texture3D(tex1, tp);
            T += texture3D(tex1, tp * 8)/8;

            vec2 wt = mat_pos.xy*.85 + mat_pos.z*.1 + T.xy * .05;

            vec3 C = texture2D( tex0, wt );

            gl_FragColor.rgb = lightAt( normalize(N), normalize(-v),
                                        C*gl_FrontMaterial.diffuse.rgb,
                                        vec3(.5,.5,.5),
                                        5 );
            gl_FragColor.a = gl_Color.a;
        }
        """ ) ),
    material( name = "bumps", textures = [ tx_turb3 ], shader = shader("""
        [fragment]
        uniform sampler3D tex0;

        void main() {
            vec3 T = texture3D(tex0, mat_pos);
            T += texture3D(tex0, mat_pos * 8)/8;
            vec3 N2 = N + T*.4;
            gl_FragColor.rgb = lightAt( normalize(N2), normalize(-v),
                                        gl_FrontMaterial.diffuse.rgb,
                                        vec3(.5,.5,.5),
                                        64 )
                                // xxx hack to reduce ambient
                                - gl_FrontMaterial.diffuse.rgb * gl_LightModel.ambient.rgb * .7;
                                        
            gl_FragColor.a = gl_Color.a;
        }
        """ )),
    material( name = "marble", textures = [ tx_turb3 ], shader = shader("""
        [fragment]
        uniform sampler3D tex0;

        void main() {
            vec3 tp = mat_pos;
            vec3 T = texture3D(tex0, tp);
            T += texture3D(tex0, tp * 8)/8;

            float a = 0.5 + 0.5*sin( mat_pos.y*10 + T.x*10 );
            vec3 C = mix( vec3(.5,.5,.65), vec3(1,1,1), a );
            gl_FragColor.rgb = lightAt( N, normalize(-v), C*gl_FrontMaterial.diffuse.rgb, vec3(.5,.5,.5), 100 );
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "metal", color = (1,.95,.7), textures = txs_env, shader = shader("""
        [vertex]
        varying vec3 R;
        uniform mat4 camera_world;
        
        void main() {
            basic();

            vec4 wP = camera_world * (gl_ModelViewMatrix * gl_Vertex);
            vec3 wN = normalize( mat3(camera_world) * (gl_NormalMatrix * gl_Normal) );
            vec3 wE = normalize( wP.xyz - camera_world[3].xyz );
            R = reflect(wE, wN);
        }

        [fragment]
        uniform sampler2D tex0; // top
        uniform sampler2D tex1; // bottom
        varying vec3 R;

        vec3 lightAtMetal( vec3 N, vec3 E, vec3 diffuse, vec3 specular, float shininess, float brilliance ) {
            vec3 color = gl_LightModel.ambient.rgb * diffuse;
            int i;

            for(i=0; i<2; i++) {
                vec3 L = normalize( gl_LightSource[i].position.xyz ); 
                vec3 R = normalize(-reflect(L,N));

                // Diffuse Term
                color += (gl_LightSource[i].diffuse.rgb * pow(max(dot(N,L), 0.0), brilliance) )*diffuse;

                // Specular Term
                if (shininess)
                    color += specular * pow(max(dot(R,E),0.0),shininess);
            }
            return color;
        }

        void main() {
            vec3 vR = normalize(R);
            vec3 C = vec3(0,0,0);
            vec2 uv;
            if (vR.z>0.0) {
                uv = (vR.xy / (2*(1+vR.z))) + .5;
                uv.y = 1-uv.y;
                C = texture2D( tex0, uv );
            } else {
                uv = (vR.xy / (2*(1-vR.z))) + .5;
                uv.x = 1-uv.x;
                uv.y = 1-uv.y;
                C = texture2D( tex1, uv );
            }
        
            gl_FragColor.rgb = C*gl_FrontMaterial.diffuse.rgb*.5 +
                lightAtMetal( N, normalize(-v),
                              gl_FrontMaterial.diffuse.rgb*.5,
                              gl_FrontMaterial.diffuse.rgb,
                              100, 4 );
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "metal2", color = (1,.95,.7), textures = txs_env, shader = shader("""
        [vertex]
        varying vec3 wN, wE;
        uniform mat4 camera_world;
        
        void main() {
            basic();

            vec4 wP = camera_world * (gl_ModelViewMatrix * gl_Vertex);
            wN = mat3(camera_world) * (gl_NormalMatrix * gl_Normal);
            wE = wP.xyz - camera_world[3].xyz;
        }

        [fragment]
        uniform sampler2D tex0; // top
        uniform sampler2D tex1; // bottom
        varying vec3 wN, wE;

        vec3 lightAtMetal( vec3 N, vec3 E, vec3 diffuse, vec3 specular, float shininess, float brilliance ) {
            vec3 color = gl_LightModel.ambient.rgb * diffuse;
            int i;

            for(i=0; i<2; i++) {
                vec3 L = normalize( gl_LightSource[i].position.xyz ); 
                vec3 R = normalize(-reflect(L,N));

                // Diffuse Term
                color += (gl_LightSource[i].diffuse.rgb * pow(max(dot(N,L), 0.0), brilliance) )*diffuse;

                // Specular Term
                if (shininess)
                    color += specular * pow(max(dot(R,E),0.0),shininess);
            }
            return color;
        }

        void main() {
            vec3 vR = reflect( normalize(wE), normalize(wN) );
            vec3 C = vec3(0,0,0);
            vec2 uv;
            if (vR.z>0.0) {
                uv = (vR.xy / (2*(1+vR.z))) + .5;
                uv.y = 1-uv.y;
                C = texture2D( tex0, uv );
            } else {
                uv = (vR.xy / (2*(1-vR.z))) + .5;
                uv.x = 1-uv.x;
                uv.y = 1-uv.y;
                C = texture2D( tex1, uv );
            }
        
            gl_FragColor.rgb = C*gl_FrontMaterial.diffuse.rgb*.5 +
                lightAtMetal( N, normalize(-v),
                              gl_FrontMaterial.diffuse.rgb*.5,
                              gl_FrontMaterial.diffuse.rgb,
                              100, 4 );
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "cartoon", textures=[], shader = shader( """
        [fragment]
        vec3 toonLight(  vec3 N, vec3 E, vec3 diffuse, vec3 specular, float shininess ) {
            vec3 color = diffuse;
            int i;

            if ( abs(dot(N,E)) < .2 )
                return vec3(0,0,0);

            for(i=0; i<2; i++) {
                vec3 L = normalize( gl_LightSource[i].position.xyz ); 
                vec3 R = normalize(-reflect(L,N));

                // Diffuse Term
                if ( dot(N,L) < 0.5 )
                    color *= 0.8;

                // Specular Term
                if ( pow(max(dot(R,E),0.0),shininess) > 0.2 ) {
                    color = specular;
                    break;
                }
            }
            return color;
        }

        void main() {
            gl_FragColor.rgb = toonLight( N, normalize(-v), gl_FrontMaterial.diffuse.rgb, vec3(1,1,1), 64 );
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "xray", transparent = True, textures = [], shader = shader( """
        [fragment]
        const float edgefalloff = 3;
        float xray() {
            float opac = dot(normalize(N), normalize(v));
            opac = abs(opac);
            opac = 1.0 - pow(opac, edgefalloff);
            return opac;
        }

        void main() {
            gl_FragColor.rgb = light();
            gl_FragColor.a = xray();
        }
        """)),
    material( name = "marble2", textures=[tx_turb3], shader = shader( """
        [fragment]
        uniform sampler3D tex0;

        void main() {
            vec3 tp = mat_pos;
            vec3 T = texture3D(tex0, tp);
            T += texture3D(tex0, tp * 8)/4;

            float a = 0.5 + 0.5*sin( mat_pos.y*16 + T.x*10 );
            vec3 C = mix( vec3(.4,.3,.3), vec3(1,1,1), a );
            vec3 N2 = N + T*1;
            gl_FragColor.rgb = lightAt( normalize(N2), normalize(-v), C*gl_FrontMaterial.diffuse.rgb, vec3(.8,.8,.8), 100 );
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "emissive1", transparent=1, textures = [], shader = shader( """
        [fragment]
        void main() {
            gl_FragColor.rgb = gl_Color.rgb;
            gl_FragColor.a = gl_Color.a * dot( normalize(N), normalize(-v) );
        }
        """)),
    material( name = "emissive2", textures = [], shader = shader( """
        [fragment]
        void main() {
            gl_FragColor.rgb = gl_Color.rgb * (.5 + .5 * dot( normalize(N), normalize(-v) ));
            gl_FragColor.a = gl_Color.a;
        }
        """)),
##    material( name = "marble_small", textures = [ tx_turb3 ], shader = shader("""
##        [fragment]
##        uniform sampler3D tex0;
##
##        void main() {
##            vec3 tp = mat_pos * 5;
##            tp += texture3D(tex0, tp.yzx*.6) / 2;
##            vec3 T = texture3D(tex0, tp);
##            /*vec3 T = texture3D(tex0, tp);
##            T += texture3D(tex0, tp * 9)/4;*/
##
##            float a = 0.5 + 0.5*sin( mat_pos.y*50 + T.x*20 );
##            vec3 C = mix( vec3(.5,.5,.65), vec3(1,1,1), 1-a*a );
##            gl_FragColor.rgb = lightAt( N, normalize(-v), C*gl_FrontMaterial.diffuse.rgb, vec3(.5,.5,.5), 100 );
##            gl_FragColor.a = gl_Color.a;
##        }
##        """)),
]

for mat in materials:
    globals()[mat.name] = mat
del mat
