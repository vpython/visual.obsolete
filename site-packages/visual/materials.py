import cvisual
from visual.primitives import texture
from numpy import array, reshape, fromstring, ubyte
import os.path

class material(cvisual.material):
   def __init__(self, **kwargs):
      cvisual.material.__init__(self)
      for key, value in kwargs.iteritems():
         self.__setattr__(key, value)
   
texturePath = os.path.split( __file__ )[0]

def findTexture(name):
    return os.path.join( texturePath, name )
def loadBTX(name, shape, **kw):
    a = reshape( fromstring( open(findTexture(name),"rb").read(), ubyte ), shape )
    return texture( data=a, **kw )
def loadImage(name, **kw):
    ## Requires PIL to be installed
    import Image
    im = Image.open(findTexture(name))
    a = array(im.getdata(), ubyte)
    return texture( data=reshape(a, im.size+(len(im.getbands()),)), **kw )

tx_turb3 = loadBTX( "turbulence3.btx", (64,64,64,3), antialias=True, mipmap=False )
tx_wood = loadBTX( "wood.btx", (512,512,3), antialias=True )

library = """
[vertex]
    #version 110
    varying vec3 N;
    varying vec3 v;
    varying vec3 p;
    uniform mat4 model_material;
    varying vec3 mat_pos;

    void basic(void)
    {
        p = vec3(gl_Vertex);
        v = vec3(gl_ModelViewMatrix * gl_Vertex);
        N = normalize(gl_NormalMatrix * gl_Normal);
        gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
        gl_FrontColor = gl_Color;
        gl_BackColor = gl_Color;
        mat_pos = vec3( model_material * gl_Vertex );
    }

[fragment]
    #version 110
    varying vec3 N;
    varying vec3 v;
    varying vec3 p;
    varying vec3 mat_pos;
    uniform int light_count;

    vec3 lightAt( vec3 N, vec3 E, vec3 diffuse, vec3 specular, float shininess ) {
        vec3 color = gl_LightModel.ambient.rgb * diffuse;

        // All this ugliness is to deal with the need of Geforce 7xxx (and probably similar generation
        // ATI cards) to unroll loops at compile time.
        int count = light_count;
        if (count <= 2) {
            for(int i=0; i<2; i++) {
                if (i<count) {
                    vec3 L = normalize( gl_LightSource[i].position.xyz - v*gl_LightSource[i].position.w );
                    color += (gl_LightSource[i].diffuse.rgb * max(dot(N,L), 0.0))*diffuse;
                    if (shininess != 0.0) {
                        vec3 R = -reflect(L,N);
                        color += specular * gl_LightSource[i].specular.rgb * pow(max(dot(R,E),0.0),shininess);
                    }
                }
            }
        } else if (count <= 4) {
            for(int i=0; i<4; i++) {
                if (i<count) {
                    vec3 L = normalize( gl_LightSource[i].position.xyz - v*gl_LightSource[i].position.w );
                    color += (gl_LightSource[i].diffuse.rgb * max(dot(N,L), 0.0))*diffuse;
                    if (shininess != 0.0) {
                        vec3 R = -reflect(L,N);
                        color += specular * gl_LightSource[i].specular.rgb * pow(max(dot(R,E),0.0),shininess);
                    }
                }
            }
        } else {
            for(int i=0; i<8; i++) {
                if (i<count) {
                    vec3 L = normalize( gl_LightSource[i].position.xyz - v*gl_LightSource[i].position.w );
                    color += (gl_LightSource[i].diffuse.rgb * max(dot(N,L), 0.0))*diffuse;
                    if (shininess != 0.0) {
                        vec3 R = -reflect(L,N);
                        color += specular * gl_LightSource[i].specular.rgb * pow(max(dot(R,E),0.0),shininess);
                    }
                }
            }
        }
            
        return color;
    }
    
    vec3 light() {
        return lightAt( normalize(N), normalize(-v), gl_FrontMaterial.diffuse.rgb, vec3(.8,.8,.8), 64.0 );
    }
"""

def shader(x):
    if x.find("[vertex]") < 0:
        x = x + """
            [vertex]
            void main() {
                basic();
            }"""
    return library + "\n".join( l.strip() for l in x.split("\n") )

materials = [
    material( name = "fast", shader = """
[vertex]
        void main() {
            gl_Position = ftransform();
            gl_FrontColor = gl_Color;
        }
[fragment]
        void main() {
            gl_FragColor = gl_Color;
        }"""),
    material( name = "diffuse", shader = shader( """
        [fragment]
        void main() {
            gl_FragColor.rgb = lightAt( N, normalize(-v), gl_FrontMaterial.diffuse.rgb, vec3(0,0,0), 0.0 );
            gl_FragColor.a = gl_Color.a;
        }""")),
    material( name = "plastic", shader = shader( """
        [fragment]
        void main() {
            gl_FragColor.rgb = light();
            gl_FragColor.a = gl_Color.a;
        }
        """)),
    material( name = "rough", textures = [ tx_turb3 ], shader = shader("""
        [fragment]
        uniform sampler3D tex0;

        void main() {
            vec3 T = texture3D(tex0, mat_pos).rgb;
            T += texture3D(tex0, mat_pos * 8.).rgb/8.;
            vec3 N2 = N + T*.4;
            gl_FragColor.rgb = lightAt( normalize(N2), normalize(-v),
                                        gl_FrontMaterial.diffuse.rgb,
                                        vec3(.5,.5,.5),
                                        16. )
                                // xxx hack to reduce ambient
                                - gl_FrontMaterial.diffuse.rgb * gl_LightModel.ambient.rgb * .7;

            gl_FragColor.a = gl_Color.a;
        }
        """ )),
    material( name = "wood", textures = [tx_wood, tx_turb3], shader = shader( """
        [fragment]
        uniform sampler2D tex0;  // wood cross-section
        uniform sampler3D tex1;  // 3D turbulence

        void main() {
            vec3 tp = mat_pos.xyz * .5;
            vec3 T = texture3D(tex1, tp).rgb;
            T += texture3D(tex1, tp * 8.).rgb/8.;

            vec2 wt = mat_pos.xy*.85 + mat_pos.z*.1 + T.xy * .05;

            vec3 C = texture2D( tex0, wt ).rgb;

            gl_FragColor.rgb = lightAt( normalize(N), normalize(-v),
                                        C*gl_FrontMaterial.diffuse.rgb,
                                        vec3(.5,.5,.5),
                                        5. );
            gl_FragColor.a = gl_Color.a;
        }
        """ ) ),
    material( name = "marble", textures=[tx_turb3], shader = shader( """
        [fragment]
        uniform sampler3D tex0;

        void main() {
            vec3 tp = mat_pos;
            vec3 T = texture3D(tex0, tp).rgb;
            T += texture3D(tex0, tp * 8.).rgb/4.;

            float a = 0.5 + 0.5*sin( mat_pos.y*16. + T.x*10. );
            vec3 C = mix( vec3(.4,.3,.3), vec3(1.,1.,1.), a );
            vec3 N2 = N + T*1.;
            gl_FragColor.rgb = lightAt( normalize(N2), normalize(-v), C*gl_FrontMaterial.diffuse.rgb, vec3(.8,.8,.8), 100. );
            gl_FragColor.a = gl_Color.a;
        }
        """)),
]

for mat in materials:
    globals()[mat.name] = mat
del mat
