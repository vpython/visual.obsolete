import cvisual

class light( cvisual.light):
    def __init__( self, pos, _other=None, **keywords):
        if _other:
            cvisual.light.__init__(self, _other)
            self.pos = pos
            self.__display = keywords.get( 'display', _other.display)
        else:
            cvisual.light.__init__(self, pos)
            self.__display = keywords.get( 'display',
                cvisual.display.get_selected())
        if keywords.has_key('display'):
            del keywords['display']
        for key, value in keywords.iteritems():
            self.__setattr__(key, value)
        if self.__display:
            self.__display.add_light(self)

    def __copy__(self, pos=None, **keywords):
        if not pos:
            pos = self.pos
        return light( _other=self, pos=pos, **keywords)

    def get_display(self):
        return self.__display

    def set_display(self, display):
        if display != self.__display:
            if display and not self.__display:
                display.add_light(self)
            elif not display and self.__display:
                self.__display.remove_light(self)
            else:
                self.__display.remove_light(self)
                display.add_light(self)
            self.__display = display
    color = cvisual.light.diffuse_color


# Code to provide special initialization for a display object, and overloaded
# properties.
class display( cvisual.display):
	def __init__( self, **keywords):
		cvisual.display.__init__(self)
		keys = keywords.keys()
		keys.sort()
		for kw in keys:
			self.__setattr__(kw, keywords[kw])
		self.ambient = 0.2
		light0 = light( pos=(0.25, 0.5, 1.0), color=0.8,
                    local=0, display=self)
		light1 = light( pos=(-1, -0.25, 0), color=0.3,
                    local=0, display=self)
		self.select()
	def select(self):
            cvisual.display.set_selected(self)
	
