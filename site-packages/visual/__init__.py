version = (4, "beta15")

# Copyright David Scherer and others, see license.txt

# Add the GTK runtime libs to PATH
import sys, time, os, os.path

true = 1
false = 0

# Prerequisite standard libraries
from math import *

# Don't try this at home!
#import array_backend
# The following is intended to be equivalent to:
# >>> from array_backend.backend[0] import *
#vars = __import__(array_backend.backend[0], globals(), locals(), [])
#for i,j in vars.__dict__.iteritems():
#    if i not in ['__builtin__', '__name__', '__main__', 'visual', '__doc__']:
#        locals()[i] = j
#
# import all of the public modules into the global namespace
from numpy import *
import crayola
color = crayola
import cvisual
cvisual.init_numpy()
from cvisual import vector, mag, mag2, norm, cross, rotate, comp, proj
from cvisual import diff_angle, rate
from visual.primitives import arrow, cylinder, cone, sphere, box, ring, label
from visual.primitives import frame, pyramid, ellipsoid, curve, faces, convex, helix
from visual.primitives import texture, points
from visual.ui import display, light
from cvisual import vector_array, scalar_array


# Find the location of the glade file (normally site-packages/visual/)
import os, sys, os.path
for _dir in sys.path:
    if _dir is "":
        _dir = os.curdir
    if os.path.isdir(_dir):
        if "visual" in os.listdir(_dir):
            cvisual._set_dataroot( os.path.join(_dir, "visual") + os.path.sep)
            break
    
try: import threading    # because it messes with exitfunc, see below
except: pass


# The following ensures that __waitclose will be run
# when we reach the end of the program,
# to permit viewing and navigating the scene.
import atexit
atexit.register(cvisual.waitclose)

# The following tells idle_VPython to not close down until/unless
# the scene is closed down by the user. It is left here for
# compatibility with old versions of idle_VPython but will no longer
# needed with the new Idle distributed with Python 2.3.
sys.ready_to_exit = cvisual.allclosed

# Construct the default display object.
scene = display()

# Work around a strange character conversion bug specific to Linux.  
# On Linux+GTK,label.text is a Unicode string. However, the Python and GTK encodings
# of Unicode are not the same (GTK uses UTF-8, and Python uses either
# UCS-16 or UCS-32 of the host endianness). So, there is some code that
# performs an implicit conversion between a Glib::ustring (a GTK UTF-8
# string) and Python Unicode strings. For some reason, the very first
# conversion included some extra characters at the beginning of the string
# when converted back to Python. The following strange statements work around 
# the bug by making and throwing away the first round-trip conversion between the two systems.
__tmp = label( text="123", visible=False)
__tmp_txt = __tmp.text
del __tmp
del __tmp_txt
