version = (4, "beta1")

# Copyright David Scherer and others, see license.txt

# Add the GTK runtime libs to PATH
import sys, time, os, os.path
if sys.platform == "win32":
    for dir in sys.path:
        if dir is "":
            dir = os.curdir
        if os.path.isdir(dir):
            if "visual" in os.listdir(dir):
                join = os.path.join
                os.environ["PATH"] = join( join(dir, "gtkrun"), "bin") \
                    + os.pathsep + os.environ["PATH"]
                break

true = 1
false = 0

# Prerequisite standard libraries
from math import *

# Don't try this at home!
import array_backend
# The following is intended to be equivalent to:
# >>> from array_backend.backend[0] import *
vars = __import__(array_backend.backend[0], globals(), locals(), [])
for i,j in vars.__dict__.iteritems():
    if i not in ['__builtin__', '__name__', '__main__', 'visual', '__doc__']:
        locals()[i] = j

# import all of the public modules into the global namespace
import crayola
color = crayola
import cvisual

from cvisual import vector, mag, mag2, norm, cross, rotate, comp, proj
from cvisual import diff_angle, rate
from visual.primitives import arrow, cylinder, cone, sphere, box, ring, label
from visual.primitives import frame, pyramid, ellipsoid, curve, faces, convex, helix
from visual.primitives import texture, points
from visual.ui import display, light
from cvisual import vector_array, scalar_array

# Find the location of the glade file (normally site-packages/visual/)
import os, sys, os.path
for dir in sys.path:
    if dir is "":
        dir = os.curdir
    if os.path.isdir(dir):
        if "visual" in os.listdir(dir):
            cvisual._set_dataroot( os.path.join(dir, "visual") + os.path.sep)
            break
    
try: import threading    # because it messes with exitfunc, see below
except: pass


# The following ensures that __waitclose will be run
# when we reach the end of the program,
# to permit viewing and navigating the scene.
import atexit
atexit.register(cvisual.waitclose)

# The following tells idle_VPython to not close down until/unless
# the scene is closed down by the user. It is left here for
# compatibility with old versions of idle_VPython but will no longer
# needed with the new Idle distributed with Python 2.3.
sys.ready_to_exit = cvisual.allclosed

# Construct the default display object.
scene = display()


