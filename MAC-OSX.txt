HOW TO BUILD VISUAL ON Apple OSX (Version 10.4.x)

If you find gaps in this information, please tell Bruce_Sherwood@ncsu.edu.

Make sure X11 and Xcode are installed (found on the installation DVD).
X11 is automatically installed on 10.5.
	
To do a clean install of fink (www.finkproject.org), I deleted /sw and started from scratch.
Install fink from fink.sourceforge.net. Probably best to install from source?
I use Fink Commander as a GUI to fink, but you can use the command line.
	
Use fink to install the components listed for Linux in INSTALL.txt (details repeated here).
	Currently (Jan. 2008) you will find 10 entries for Boost; you
	need to expand the package name field wide enough to be able to see which
	boostN.N.pyth packages go with your chosen version of Python (you also
	need the non-Python libraries, boostN.N.nopy and boostN.N.syste).
	I installed Python2.5, numpy, the boost libraries, then install these:
	
	gtkmm-2.4, which installs many other packages on which it depends, including
	gtk+2, glib, glibmm, libsig++, atk, pango, automake, autoconf, libtool, pkgconfig 
	
	libglademm2.4, libglademm2.4-shlibs
	
	cairomm1, cairomm1-shlibs (takes a LONG time)
	
	gtkglextmm, getkglextmm-shlibs
	
	Need freetype2, but install freetype219 and freetype219-shlibs instead.
	Because this does not put freetype2.pc into the usual place (/sw/lib/pkgconfig),
	PKG_CONFIG_PATH is set in the configure script to find it.

You can test the pkgconfig machinery by executing the following:
	   pkg-config --libs pango
The output should be -L/sw/lib -lpango-1.0 -lm -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lintl -liconv 
	   
Here is what happens when I run autogen.sh: 
/sw/share/aclocal/gtkglextmm-1.2.m4:225: warning: 
          underquoted definition of AC_GTKGLEXTMM_SUPPORTS_MULTIHEAD
  run info '(automake)Extending aclocal'
  or see http://sources.redhat.com/automake/automake.html#Extending-aclocal
configure.ac: installing `./missing'
Completed successfully

Apparently the warning about AC_GTKGLEXTMM_SUPPORTS_MULTIHEAD isn't fatal, as it was possible
to build Visual.
	
After important help from Martin Costabel, I was able to make, install, and run successfully.
I placed this file in a build directory at the same level as vpython-core2:
#!/bin/sh -ex
export CPPFLAGS="-Wno-long-double"
export PKG_CONFIG_PATH=/sw/lib/fontconfig2/lib/pkgconfig:/sw/lib/xft2/lib/pkgconfig:/sw/lib/freetype219/lib/pkgconfig
export PYTHON=/sw/bin/python2.5
export CXXFLAGS="-O2 -g -finline-functions"
export CFLAGS='-O3 -g ' 
../vpython-core2/configure --prefix=/sw --disable-dependency-tracking

If you call this file config.txt, in the build directory you need to execute
   chmod +x config.txt
to make the file be executable by "./config.txt".
	
Before making a change to src/Makefile.in, I got a message about possible mismatch of versions, 
as though when I build against /sw/bin/python2.5 and then run /sw/bin/python2.5 the system thinks 
these are different pythons. Martin Costabel commented:

"I am getting this, too, when using the dynamic boost-python library, but not with the static 
libboost_python-mt.a. This is certainly a bug with the libboost_python-mt.dylib, but I haven't 
yet found a combination of build flags to build it correctly, in particular in a way that would 
also work on OSX 10.5."

Following his suggestion, I put Mac-specific code into src/Makefile.in to link to these other
libraries. But then I got this error message in the link phase of the make:

/usr/bin/ld: table of contents for archive: /sw/lib/libboost_python-mt.a is out of date; rerun ranlib(1) (can't load from it) 

So I executed ranlib /sw/lib/libboost_python-mt.a, redid the make, executed make install, and it worked.

However, there are significant bugs which show up when running the example programs:

1) The following sequence crashes if the object is a label, but not with other objects:
obj = label(text='hello')
obj.visible = 0
obj = 35
The implication is that the label destructor fails on Mac (works okay on Windows and Linux).

2) rotate(v, angle=something, axis=something) crashes. This free function is in vector.hpp.
The form v.rotate(angle=something, axis=something) works fine. This is in vector.cpp.
Note that in wrap_vector.cpp there are 5 different references to rotate.
One wonders whether this is a Boost problem? Words fine on Windows and Linux.

3) Programs that append to a faces object crash (for example, faces_heightfield.py, graphs
that use gvbars or ghistogram). No problem on Windows and Linux. 

A non-fatal bug is that orbits.py and stars.py have dim or strange lighting.


