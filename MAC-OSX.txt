HOW TO BUILD VISUAL ON Apple OSX (Version 10.4.x)

If you find gaps in this information, please tell Bruce_Sherwood@ncsu.edu.

Make sure X11 and Xcode are installed (found on the installation DVD).
X11 is automatically installed on 10.5.
	
To do a clean install of fink (www.finkproject.org), I deleted /sw and started from scratch.
Install fink from fink.sourceforge.net. Probably best to install from source?
I use Fink Commander as a GUI to fink, but you can use the command line.
	
Use fink to install the components listed for Linux in INSTALL.txt (details repeated here).
	
	If you're not using Fink Commander (and despite its graphic user interface there are
	hints that maybe it is buggy), on a command line you say for example "fink install python25".
	
	Install numpy-25, which also installs python25.

	Currently (Jan. 2008) you will find 10 entries for Boost libraries; if using Fink Commander
	you need to expand the package name field wide enough to be able to see the full names,
	as you want the Boost libraries for Python 2.5.
	
	Install boost1.34.python25, boost1.34.systempython, and boost1.34.nopython.
	
	Next install gtkmm2.4-dev, which installs many other packages on which it depends, including
	gtk+2, glib, glibmm, libsig++, atk, pango, expat1, libpng3,
	automake, autoconf, libtool, pkgconfig 
	
	Next, install these libraries:
	libglademm2.4, libglademm2.4-shlibs
	
	cairomm1, cairomm1-shlibs (takes a LONG time)
	
	gtkglextmm, getkglextmm-shlibs
	
	Need freetype2, but install freetype219 and freetype219-shlibs instead.
	Because this does not put freetype2.pc into the usual place (/sw/lib/pkgconfig),
	PKG_CONFIG_PATH is set in the configure script to find it.

You can test the pkgconfig machinery by executing the following:
	   pkg-config --libs pango
The output should be -L/sw/lib -lpango-1.0 -lm -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lintl -liconv 
	   
Here is what happens when I run autogen.sh: 
/sw/share/aclocal/gtkglextmm-1.2.m4:225: warning: 
          underquoted definition of AC_GTKGLEXTMM_SUPPORTS_MULTIHEAD
  run info '(automake)Extending aclocal'
  or see http://sources.redhat.com/automake/automake.html#Extending-aclocal
configure.ac: installing `./missing'
Completed successfully

Apparently the warning about AC_GTKGLEXTMM_SUPPORTS_MULTIHEAD isn't fatal, as it was possible
to build Visual.
	
After important help from Martin Costabel, I was able to make, install, and run successfully.
I placed this file in a build directory at the same level as vpython-core2:
#!/bin/sh -ex
export CPPFLAGS="-Wno-long-double"
export PKG_CONFIG_PATH=/sw/lib/fontconfig2/lib/pkgconfig:/sw/lib/xft2/lib/pkgconfig:/sw/lib/freetype219/lib/pkgconfig
export PYTHON=/sw/bin/python2.5
export CXXFLAGS="-O2 -g -finline-functions"
export CFLAGS='-O3 -g ' 
../vpython-core2/configure --prefix=/sw --disable-dependency-tracking

If you call this file config.txt, in the build directory you need to execute
   chmod +x config.txt
to make the file be executable by "./config.txt".
	
Before making a change to src/Makefile.in, I got a message about possible mismatch of versions, 
as though when I build against /sw/bin/python2.5 and then run /sw/bin/python2.5 the system thinks 
these are different pythons. Martin Costabel commented:

"I am getting this, too, when using the dynamic boost-python library, but not with the static 
libboost_python-mt.a. This is certainly a bug with the libboost_python-mt.dylib, but I haven't 
yet found a combination of build flags to build it correctly, in particular in a way that would 
also work on OSX 10.5."

Following his suggestion, I put Mac-specific code into src/Makefile.in to link to these other
libraries. But then I got this error message in the link phase of the make:

/usr/bin/ld: table of contents for archive: /sw/lib/libboost_python-mt.a is out of date; rerun ranlib(1) (can't load from it) 

So I executed ranlib /sw/lib/libboost_python-mt.a, redid the make, executed make install, and it worked.

However, there are significant bugs which show up when running the example programs:

1) The following sequence crashes if the object is a label, but not with other objects:
obj = label(text='hello')
obj.visible = 0
obj = 35
The implication is that the label destructor fails on Mac (works okay on Windows and Linux).
The rule is that if you make an object invisible, then reassign the only name for that 
object (obj = 35), Python is free to destroy the object and reuse the memory, 
because there is no longer any way for your program to get at that object.

2) rotate(v, angle=something, axis=something) crashes. This free function is in vector.hpp.
The form v.rotate(angle=something, axis=something) works fine. This is in vector.cpp.
Note that in wrap_vector.cpp there are 5 different references to rotate.
One wonders whether this is a Boost problem? Works fine on Windows and Linux.

3) Programs that append to a faces object crash (for example, faces_heightfield.py, graphs
that use gvbars or ghistogram). No problem on Windows and Linux. 
faces_heightfield.py has append(pos, color, normal) -- append_all_vectors in wrap_arrayobjects.cpp
graph.py has append(pos, normal) -- this is append_default_color in wrap_arrayobjects.cpp
There is also append_rgba in wrap_arrayobjects.cpp, for pattern append(pos, red, green, blue, opacity),
  and this version also crashes.
Note: Shouldn't we also accept append(pos)?
We didn't in Visual 3, but we should have. The documentation doesn't even mention any append option.
Putting in print statements in faces.cpp we see that append never gets to faces.cpp.
Suggestive of a Boost problem.

4) A non-fatal bug is that orbits.py and stars.py have dim or strange lighting.

Because it looks like the problem could be Boost, try building Boost libraries from scratch:

./configure --prefix=/sw --with-libraries=python,thread --with-python=/sw/bin/python2.5
   (This creates user-config.jam)
make
   (apparently equivalent to bjam --user-config=user-config.jam --with-python --with-thread)
sudo make install
There's a name issue; the boost includes need to be available at /sw/include/boost, so do this:
cd /sw/include/boost_1_34_1
sudo cp -r boost /sw/include
I don't understand how /sw/include/boost is found. Looking at our src/build.log, I don't see
anything that specifies we should look generally in /sw/include. Yet when boost is buried in
boost_1_34_1, we don't find header files, and when it is unburied into /sw/include/boost we do.

After a successfull make and "make install" invoking dynamic libraries,
copy these new boost files to /sw/lib/python2.5/site-packages:
bin.v2/libs/python/build/darwin/release/libboost_python-1_34_1.dylib
bin.v2/libs/python/build/darwin/release/threading-multi/libboost_python-mt-1_34_1.dylib
bin.v2/libs/thread/build/darwin/release/threading-multi/libboost_thread-mt-1_34_1.dylib

But cvisual can't find a dylib:

Traceback (most recent call last):
  File "/sw/lib/python2.5/site-packages/visual/examples/bounce2.py", line 1, in <module>
    from visual import *
  File "/sw/lib/python2.5/site-packages/visual/__init__.py", line 140, in <module>
    import cvisual
ImportError: dlopen(/sw/lib/python2.5/site-packages/cvisualmodule.so, 2): Library not loaded: bin.v2/libs/python/build/darwin/release/libboost_python-1_34_1.dylib
  Referenced from: /sw/lib/python2.5/site-packages/cvisualmodule.so
  Reason: image not found
  
I think I've seen stuff on the web about problems with locating dylibs.

Tried changing src/Makefile.in to use only static boost libraries:

  ifeq ($(PYTHON_PLATFORM),darwin)
    # Special rules for OSX
    CVISUAL_LIBS += $(filter-out $(_FILTER_OUT), $(GTK_LIBS) \
       $(GTHREAD_LIBS) /sw/lib/libboost_python-mt.a /sw/lib/libboost_thread-mt.a)

This happened on the make:

/usr/bin/ld: table of contents for archive: /sw/lib/libboost_python-mt.a is out of date; rerun ranlib(1) (can't load from it)
/usr/bin/ld: table of contents for archive: /sw/lib/libboost_thread-mt.a is out of date; rerun ranlib(1) (can't load from it)

So I did this:

bruce-sherwoods-computer:~/Documents/workspace/build brucesherwood$ cd /sw/lib
bruce-sherwoods-computer:/sw/lib brucesherwood$ sudo ranlib libboost_python-mt.a
Password:
bruce-sherwoods-computer:/sw/lib brucesherwood$ sudo ranlib libboost_thread-mt.a
ranlib: file: libboost_thread-mt.a(tss_hooks.o) has no symbols
ranlib: file: libboost_thread-mt.a(tss_dll.o) has no symbols
ranlib: file: libboost_thread-mt.a(tss_pe.o) has no symbols
bruce-sherwoods-computer:/sw/lib brucesherwood$ 

Still has same problems with faces.append and rotate(vector, angle, axis).

-----------------
Unsuccessful approach
bjam --prefix=/sw --toolset=darwin --with-python-version=2.5 --with-thread stage

Copy the directory named "boost" to /sw/include.

> cp stage/lib/libboost_thread-mt.a /sw/lib
> cp bin.v2/libs/python/build/darwin/release/link-static/threading-multi/libboost_python-mt-1_34_1.a /sw/lib/libboost_python.a

After a successfull make and "make install" invoking dynamic libraries,
copied these new boost files to /sw/lib/python2.5/site-packages:
stage/lib/libboost_thread-mt-1_34_1.dylib
bin.v2/libs/python/build/darwin/release/libboost_python-1_34_1.dylib
bin.v2/libs/python/build/darwin/release/threading-multi/libboost_python-mt-1_34_1.dylib

This attempt didn't help. Still get "Fatal Python error: Interpreter not initialized (version mismatch?).
Is it possible that bjam worked against an old version of Python? Maybe /user/bin/python (which is the
one I see with "which python" and which is version 2.3.5)? No reason bjam should look for python in /sw.
