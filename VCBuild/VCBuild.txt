Building vpython with from Visual Studio C++ 		
	
	a)Vpython cvs
	        Check-out the vpython-core2 module from
		:pserver:anonymous@visualpython.cvs.sourceforge.net:/cvsroot/visualpython

	b)Python25
		Install Python 2.5.x via the Windows Installer at http://www.python.org/download/.
		Make sure it is installed on the same drive as vpython-core2, in /Python25/.

	c)VPython installer
		Install VPython from the normal installer.  Technically it is only required to install
                numpy(?) but this will tend to get you the latest dependencies.

    d)Install Visual C++ 2005 Express Edition and platform SDK as per the instructions at
        http://msdn2.microsoft.com/en-us/vstudio/aa700736.aspx
        At least on Vista, you must do this in Internet Explorer, not some other browser.
        I had to use Windows Update to update Visual C++ on a Vista machine. It's all
        pretty complicated. We really need to be using Visual C++ 2008, I think.
        (An attempt to use Visual C++ 2008 on Vista failed to produce a module that worked,
        and the Boost libraries complained about the compiler version not being acceptable.)
			
		Note that you need to go to the bottom of the SDK page to get the 2003 download.
		As of 2008/5/11, it has gotten harder to get the SDK, as Microsoft has eliminated
		the 2003 SDK downloads except for the one which downloads a .img file.
		I then had to find a program to unpack such a file, then install.
			
		Here are instructions that need to be followed to use the SDK:
			
		Update the Visual C++ directories in the Projects and Solutions section 
		in the Tools > Options dialog box. Add these paths to the appropriate subsection:

		Executable files: C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Bin
		Include files: C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Include
		Library files: C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Lib
		
			It isn't entirely obvious how you are supposed to add these paths: 
			double-click an entry that has "SDK" in its name, 
			and a "..." icon will show up, which you should click. 
			Browse to the appropriate location
			in C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2
			(\Bin, \Include, \Lib).
			
		Note: Alternatively, you can update the Visual C++ Directories by modifying the 
		VCProjectEngine.dll.express.config file located in the \vc\vcpackages subdirectory of the 
		Visual C++ Express install location. Please make sure that you also delete the file 
		"vccomponents.dat" located in the 
		"%USERPROFILE%\Local Settings\Application Data\Microsoft\VCExpress\8.0" 
		if it exists before restarting Visual C++ Express Edition. 

		One more step is needed to make the Win32 template work in Visual C++ Express. 
		You need to edit the corewin_express.vsprops file 
		(found in C:\Program Files\Microsoft Visual Studio 8\VC\VCProjectDefaults) and

		Change the string that reads:

		AdditionalDependencies="kernel32.lib"
		  to
		AdditionalDependencies="kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib"
        
    e)Unzip Boost
                Extract the files in vpython-core2/dependencies/boost_1_34_1.zip so that there
                is a folder vpython-core2/dependencies/boost_1_34_1.
        
	f)Install package (might be optional)
                Delete the /Python25/lib/site-packages/visual folder and replace it with:
                    vpython-core2/site-packages/visual
                    vpython-core2/visual/docs
                    vpython-core2/visual/examples

		(You installed VPython already, but the CVS version might have changes to files other than 
                cvisual.pyd)

        g)Build cvisual.pyd
             Open the cvisual.sln project file in Visual Studio Express, make Release the active 
             configuration, then on the Build menu choose "Build Solution".

             The .pyd file will be placed directly in the Python25/lib/site-packages/visual folder, ready to run!

             This is the only step that needs to be repeated as you make changes to the C++ source code.
