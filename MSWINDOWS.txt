HOW TO BUILD VISUAL ON MICROSOFT WINDOWS

If you find gaps in this information, please tell Bruce_Sherwood@ncsu.edu.

Note: In source code, _WIN32 is a flag set by the MinGW compiler,
and _MSC_VER is a flag set by the Microsoft Visual Studio compiler.

(In early 2007 there was experimentation with using Visual Studio
to build Visual, but this is not being used at present. See the
VCBuild directory.)

INSTALL PYTHON AND NUMPY
Download and install Python 2.5.x from www.python.org.
OpenGL is provided with the standard Windows installation.

Download and install numpy (http://numpy.scipy.org).

Copy Python25's libs/libpython25.a to /mingw/lib.
See http://www.python.org/doc/current/inst/tweak-flags.html for discussion.

INSTALL UNIX-LIKE MACHINERY FOR BUILDING VISUAL
You need to download and install MinGW, then MSYS, then MSYS-DTK.

Go to www.mingw.org. The download section will send you to sourceforge.net.
Download and install the automated MinGW installer, currently MinGW-5.1.3.
Run this exe installer. Specify that you want the g++ compiler (for C++).
The installer will also install gcc-core, mingw-runtime, and w32api.

From help obtained in mingw-msys-bounces@lists.sourceforge.net (2008/01/31):
"For Windows Vista, Microsoft changed how msvcrt.dll reacts to access(), 
normally in XP and 2000, X_OK parameter is ignored, but Vista pukes on it. 
The MinGW gcc is affected by it. The patched version is found at
http://dessent.net/tmp/gcc-vista-3.4.5-20060117-1.tar.gz"

So get this file, start up MSYS, cd to the folder where the gz file is located.
If this folder is (say) C:\installers\msys_stuff, in the MSYS application you
type cd /c/installers/msys_stuff. Note that the TAB key will complete an 
incomplete address. The up arrow retrieves an earlier command type-in.

Execute gunzip gcc-vista-3.4.5-20060117-1.tar.gz. This will produce folders
bin and libexec. Copy the files in these folders to the corresponding locations
in c:/MinGW.

From the same sourceforge.net site, download and install MSYS.
You must click on MSYS Base System in the left column in order to find
and download the current release (currently MSYS-1.0.10.exe). Install,
and when asked tell where MinGW is located (normally c:/MinGW).

Back on the main sourceforge page, click on MSYS Supplementary Tools
in the left column in order to find and download the current release of
the developer's toolkit (currently msysDTK-1.0.1.exe).

-------------Need to check whether the following stuff is necessary
You may need to add C:\mingw\bin to your PATH.
You will also need to install msys-automake, msys-autoconf, and msys-libtool.

If you are building on Windows Vista, execute "gcc --version" and note
the version number (e.g. 3.4.2). Then in msys/etc/profile, change the
PATH setting to include /mingw/bin:/mingw/libexec/gcc/mingw32/3.4.2 (otherwise
the configure step will fail due to a failure of gcc to find a file).

Vista problem: See the following note about why msys/bin/install can fail.
Downloading and installing the updated coreutils for msys did the trick.

http://sourceforge.net/tracker/index.php?func=detail&aid=1711379&group_id=2435&atid=102435

I tried the following, and it didn't work for me:
"The heuristics can be turned off on Business and Ultimate editions of
Vista through the "Local Security Policy" found under Administrative Tools.
Look under "Local Policies / Security Options / User Account Control:
Detect application installations and prompt for elevation". I don't think
the security policy editor is included in home editions, but there should
be a registry hack which would have the same effect."
--------------

BUILDING BOOST
The Boost libraries are extensions to C++. Among the libraries
are python and thread libraries used by Visual. The python library
makes connections between Python and C++.

The following instructions can be used to build from source those 
Boost libraries needed by Visual. However, the process takes a long
time, so precompiled files are available in the Developers section
of vpython.org, which makes the following procedure unnecessary.

BUILDING BOOST FROM SOURCE
Download a precompiled version of the 'bjam' tool from www.boost.org 
and place it into C:\mingw\bin (or anywhere else on your executable PATH).

Download latest Boost (1.34.1) from www.boost.org.
> tar -xjf boost_1_34_1.tar.bz2

The following must be done from a Windows typescript, NOT from Msys.
(From Start/Run, execute cmd.)
> cd boost_1_34_1
(-a means rebuild all)

Make sure that Python 2.5 is the only Python installed, then (takes a long time):
> bjam --toolset=gcc --with-python --with-thread stage

Copy the directory named "boost" to /mingw/include.

Switch to Msys and cd to boost_1_34_1.
> cp stage/lib/boost_thread-mgw34-mt-1_34_1.dll /mingw/bin
> cp stage/lib/boost_thread-mgw34-mt-1_34_1.a /mingw/lib/libboost_thread.a
> cd bin.v2/libs/python/build/gcc-mingw-3.4.2/release/threading-multi
> cp boost_python-mgw34-mt-1_34_1.dll /mingw/bin
> cp boost_python-mgw34-mt-1_34_1.a /mingw/lib/libboost_python25.a 

Another possibility would be to configure the boost build with a config file:
boost_1_34_1/tools/build/v2/user-config.jam is the user configuration file.
It should be placed in your home directory.
Your home directory can be found by executing ECHO %HOMEDRIVE%%HOMEPATH%

GTK+ AND FRIENDS
gtk+ (also called gtk2) is written in C; gtkmm is a "wrapper" of these C routines 
to make gtk+ functionality accessible to C++ programmers.

Go to http://ftp.gnome.org/pub/GNOME/binaries/win32 and download and
install into C:\MinGW the latest versions of the following components:

gtk+-dev
  (Don't think I need gtk+)
gtkmm-win32-devel
  (Don't think I need gtkmm-win32-runtime)
libglade-dev
pango-dev
atk-dev
glib-dev
  (Do I need libiconv and gettext, available at www.gimp.org/~tml/gimp/win32/downloads.html?)

At sourceforge.net/projects/gtkglext download the zip files for gtkglext and gtkglextmm.
Unzip the source files. To build, go into a directory, and do this:
		> ./configure
		> make
		> make install
For some unknown reason, the build process for gtkglextmm sometimes fails, 
on some Windows machines. For that reason, the needed binaries are avalable 
in the developer's section of vpython.org.

See INSTALL.txt for further information on the build process itself.

------------------------------------
At http://gladewin32.sourceforge.net, you need the development version, which includes
such things as glib, atk, pango, cairo, glade, and fontconfig.

Some of the following is probably now installed by the gtk2 and gtkmm installers.
After installing gtk2 and gtkmm, check to see whether you have these packages.
 		Download pkg-config-0.20 in zip format and unzip.
		One place to get it is http://www.gimp.org/~tml/gimp/win32/downloads.html.
		Note that if you don't already have it, you  need glib-2.1.27.zip available here.
		And glib in turn requires libiconv and gettext, also available at the same location.
		These are binary distributions; after unzipping, copy files to the corresponding
		locations in mingw.
		
		A library such as sigc++, see below,
		registers its version number in mingw/lib/pkgconfig/sigc++-2.0.pc, which makes it
		possible for the build process to find the installed version of the library.
		There is some ambiguity about where to put the pkg-config pieces, as some components need
		to be in msys. Copy pkg-config.exe to mingw/bin and pkg.m4 to mingw/share/aclocal
		but also to msys/1.0/share/aclocal.
		You probably also need to set an environment variable for pkg-config:
		Right click My Computer > Properties > Advanced > Environment Variables and
		add a new entry: name PKG_CONFIG_PATH, value c:\mingw\lib\pkgconfig.
		NOTE: You can run "env" in an MSYS terminal to check that the path is appropriate. 
		
		Download the source for libsigc++-2.0.17 from libsigc.sourceforge.net.
		> tar -xjf libsigc++-2.0.17.tar.bz2
		cd to the new directory, execute 
		> ./configure --prefix=/mingw
		> make
		> make install
		Can test that pkg-config is correctly installed by executing this:
		> pkg-config --cflags sigc++-2.0cd
-------------------------------------

DEBUGGING
From a typescript, the following will print all VPYTHON_NOTEs:
env VPYTHON_DEBUG=1 python test.py
(This assumes you've executed cd /c/python25 and that test.py as
well as python.exe is in that directory.)

HOW TO CREATE AN INSTALLER FOR VISUAL FOR MICROSOFT WINDOWS
You need InnoSetup (www.jrsoftware.org) to create an installer for end users.

In addition to mingw10.dll and a couple of Boost dll's, I included the files listed below 
in the same directory as the main application (a .pyd file for a 3D visualization module 
for Python, written in C++; see vpython.org). I stripped the files to save a lot of space
and put the stripped versions in c:\MinGW\stripped. The installer, made with InnoSetup, 
is 8.5 MB (the non-gtkmm version was 2.5 MB).

I determined which dll's I needed by repeatedly running the application and one-by-one 
getting error messages saying I was missing a dll. And then to make sure I'd gotten 
everything, I changed the name of c:\MinGW to c:\xxxMinGW and ran again, to prevent 
accessing dll's from the developer directories.

The only Windows-specific code remaining is a substitute for gettimeofday. I see in 
surfing the web that lots of people keep reinventing this routine for use on Windows. 
Seems like it would make sense for it to be part of gtk for Windows.

A colleague is attempting to use the new gtkmm-to-Quartz machinery on the Mac to make 
a native Mac version of VPython with a simple installation procedure, because many of 
our end users find it a difficult hassle installing X11 and Xcode and fink and finally 
VPython. Hopefully we'll have essentially one set of C++ code that works on all platforms.

List of gtk2-related files:

MinGW/etc/fonts
MinGW/etc/gtk-2.0
MinGW/etc/pango
MinGW/lib/gtk-2.0
MinGW/lib/pango

iconv.dll
intl.dll
libatk-1.0-0.dll
libatkmm-1.6-1.dll
libcairo-2.dll
libcairomm-1.0-1.dll
libfontconfig-1.dll
libfreetype-6.dll
libgdk-win32-2.0-0.dll
libgdk_pixbuf-2.0-0.dll
libgdkglext-win32-1.0-0.dll
libgdkmm-2.4-1.dll
libglade-2.0-0.dll
libglademm-2.4-1.dll
libglib-2.0-0.dll
libglibmm-2.4-1.dll
libgmodule-2.0-0.dll
libgobject-2.0-0.dll
libgthread-2.0-0.dll
libgtk-win32-2.0-0.dll
libgtkglext-win32-1.0-0.dll
libgtkmm-2.4-1.dll
libpango-1.0-0.dll
libpangocairo-1.0-0.dll
libpangoft2-1.0-0.dll
libpangomm-1.4-1.dll
libpangowin32-1.0-0.dll
libpng12.dll
libsigc-2.0-0.dll
libxml2.dll
zlib1.dll


